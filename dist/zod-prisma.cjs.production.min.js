"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var t=e(require("path")),n=require("@prisma/generator-helper"),r=require("ts-morph"),i=require("typescript"),a=e(require("zod")),o=function(e){var t=[];if(e){var n=e.split("\n").filter((function(e){return!e.trimLeft().startsWith("@zod")}));n.length&&(t.push("/**"),n.forEach((function(e){return t.push(" * "+e)})),t.push(" */"))}return t},u=function(e,t){void 0===t&&(t=function(e){return e.toString()});var n="z.unknown()",r=[""];if("scalar"===e.kind)switch(e.type){case"String":n="z.string()";break;case"Int":n="z.number()",r.push("int()");break;case"BigInt":n="z.bigint()";break;case"DateTime":n="z.date()";break;case"Float":case"Decimal":n="z.number()";break;case"Json":n="z.any()";break;case"Boolean":n="z.boolean()";break;case"Bytes":n="z.unknown()"}else"enum"===e.kind?n="z.nativeEnum("+e.type+")":"object"===e.kind&&(n=t(e.type));return e.isList&&r.push("array()"),e.documentation&&r.push.apply(r,e.documentation.split("\n").filter((function(e){return e.trimLeft().startsWith("@zod")})).map((function(e){return e.trim().split("@zod.").slice(-1)[0]}))),e.isRequired||r.push("nullable()"),""+n+r.join(".")},c=function(e,t,n){return void 0===n&&(n=!0),t.forEach((function(t){return e.write(t).conditionalNewLine(n)}))},s=a.object({relationModel:a.enum(["default","true","false"]).default("true").transform((function(e){switch(e){case"default":return e;case"true":return!0;case"false":return!1}})),modelSuffix:a.string().default("Model"),modelCase:a.enum(["PascalCase","camelCase"]).default("PascalCase")});n.generatorHandler({onManifest:function(){return{prettyName:"Zod Schemas",defaultOutput:"zod",version:"0.2.1"}},onGenerate:function(e){var n=new r.Project({skipAddingFilesFromTsConfig:!0}),a=e.generator.output.value,l=e.dmmf.datamodel.models,d=e.otherGenerators.find((function(e){return"prisma-client-js"===e.provider.value})),m=s.safeParse(e.generator.config);if(!m.success)throw new Error("Incorrect config provided. Please check the values you provided and try again.");var f=m.data,p=f.relationModel,h=f.modelSuffix,v=f.modelCase,w=function(e,t){return void 0===t&&(t=""),"camelCase"===v&&(e=e.slice(0,1).toLowerCase()+e.slice(1)),""+t+e+h},y=n.createSourceFile(a+"/index.ts",{},{overwrite:!0});return l.forEach((function(e){y.addExportDeclaration({moduleSpecifier:"./"+e.name.toLowerCase()});var s=function(e){return w(e,"default"===p?"_":"")},l=function(e){return w("default"===p?e.toString():"Related"+e.toString())},m=n.createSourceFile(a+"/"+e.name.toLowerCase()+".ts",{statements:[{kind:r.StructureKind.ImportDeclaration,namespaceImport:"z",moduleSpecifier:"zod"}]},{overwrite:!0}),f=e.fields.filter((function(e){return"enum"===e.kind})),h=t.relative(a,d.output.value);h.endsWith("/node_modules/@prisma/client")?h="@prisma/client":h.startsWith("./")||h.startsWith("../")||(h="./"+h);var v=e.fields.filter((function(e){return"object"===e.kind}));if((!1!==p&&v.length>0||f.length>0)&&m.addImportDeclaration({kind:r.StructureKind.ImportDeclaration,isTypeOnly:0===f.length,moduleSpecifier:h,namedImports:!1!==p&&v.length>0?[e.name].concat(f.map((function(e){return e.type}))):f.map((function(e){return e.type}))}),m.addStatements((function(t){return c(t,o(e.documentation))})),m.addVariableStatement({declarationKind:r.VariableDeclarationKind.Const,isExported:!0,declarations:[{name:s(e.name),initializer:function(t){t.write("z.object(").inlineBlock((function(){e.fields.filter((function(e){return"object"!==e.kind})).forEach((function(e){c(t,o(e.documentation)),t.write(e.name+": "+u(e)).write(",").newLine()}))})).write(")")}}]}),!1!==p&&v.length>0){var z=v.filter((function(t){return t.type!==e.name}));z.length>0&&m.addImportDeclaration({kind:r.StructureKind.ImportDeclaration,moduleSpecifier:"./index",namedImports:Array.from(new Set(z.flatMap((function(e){return["Complete"+e.type,l(e.type)]}))))}),m.addInterface({name:"Complete"+e.name,isExported:!0,extends:function(t){return t.write(e.name)},properties:v.map((function(e){return{name:e.name,type:"Complete"+e.type+(e.isList?"[]":"")+(e.isRequired?"":" | null")}}))}),m.addStatements((function(t){return c(t,["","/**"," * "+l(e.name)+" contains all relations on your model in addition to the scalars"," *"," * NOTE: Lazy required in case of potential circular dependencies within schema"," */"])})),m.addVariableStatement({declarationKind:r.VariableDeclarationKind.Const,isExported:!0,declarations:[{name:l(e.name),type:"z.ZodSchema<Complete"+e.name+">",initializer:function(t){t.write("z.lazy(() => "+s(e.name)+".extend(").inlineBlock((function(){v.forEach((function(e){c(t,o(e.documentation)),t.write(e.name+": "+u(e,l)).write(",").newLine()}))})).write("))")}}]})}m.formatText({indentSize:2,convertTabsToSpaces:!0,semicolons:i.SemicolonPreference.Remove})})),n.save()}});
//# sourceMappingURL=zod-prisma.cjs.production.min.js.map
