{"version":3,"file":"zod-prisma.cjs.development.js","sources":["../src/docs.ts","../src/types.ts","../src/util.ts","../src/index.ts"],"sourcesContent":["export const getJSDocs = (docString?: string) => {\n\tconst lines: string[] = []\n\n\tif (docString) {\n\t\tconst docLines = docString\n\t\t\t.split('\\n')\n\t\t\t.filter((dL) => !dL.trimLeft().startsWith('@zod'))\n\n\t\tif (docLines.length) {\n\t\t\tlines.push('/**')\n\t\t\tdocLines.forEach((dL) => lines.push(` * ${dL}`))\n\t\t\tlines.push(' */')\n\t\t}\n\t}\n\n\treturn lines\n}\n\nexport const computeModifiers = (docString: string) => {\n\treturn docString\n\t\t.split('\\n')\n\t\t.filter((line) => line.trimLeft().startsWith('@zod'))\n\t\t.map((line) => line.trim().split('@zod.').slice(-1)[0])\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { computeModifiers } from './docs'\n\nexport const getZodConstructor = (\n\tfield: DMMF.Field,\n\tgetRelatedModelName = (\n\t\tname: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg\n\t) => name.toString()\n) => {\n\tlet zodType = 'z.unknown()'\n\tlet extraModifiers: string[] = ['']\n\tif (field.kind === 'scalar') {\n\t\tswitch (field.type) {\n\t\t\tcase 'String':\n\t\t\t\tzodType = 'z.string()'\n\t\t\t\tbreak\n\t\t\tcase 'Int':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\textraModifiers.push('int()')\n\t\t\t\tbreak\n\t\t\tcase 'BigInt':\n\t\t\t\tzodType = 'z.bigint()'\n\t\t\t\tbreak\n\t\t\tcase 'DateTime':\n\t\t\t\tzodType = 'z.date()'\n\t\t\t\tbreak\n\t\t\tcase 'Float':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Decimal':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Json':\n\t\t\t\tzodType = 'z.any()'\n\t\t\t\tbreak\n\t\t\tcase 'Boolean':\n\t\t\t\tzodType = 'z.boolean()'\n\t\t\t\tbreak\n\t\t\tcase 'Bytes':\n\t\t\t\tzodType = 'z.unknown()'\n\t\t\t\tbreak\n\t\t}\n\t} else if (field.kind === 'enum') {\n\t\tzodType = `z.nativeEnum(${field.type})`\n\t} else if (field.kind === 'object') {\n\t\tzodType = getRelatedModelName(field.type)\n\t}\n\n\tif (field.isList) extraModifiers.push('array()')\n\tif (field.documentation) {\n\t\textraModifiers.push(...computeModifiers(field.documentation))\n\t}\n\tif (!field.isRequired) extraModifiers.push('nullable()')\n\n\treturn `${zodType}${extraModifiers.join('.')}`\n}\n","import type { CodeBlockWriter } from 'ts-morph'\n\nexport const writeArray = (\n\twriter: CodeBlockWriter,\n\tarray: string[],\n\tnewLine = true\n) => array.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n","import path from 'path'\nimport { generatorHandler, DMMF } from '@prisma/generator-helper'\nimport { Project, StructureKind, VariableDeclarationKind } from 'ts-morph'\nimport { SemicolonPreference } from 'typescript'\nimport { getJSDocs } from './docs'\nimport { getZodConstructor } from './types'\nimport { writeArray } from './util'\nimport z from 'zod'\n\nconst configSchema = z.object({\n\trelationModel: z\n\t\t.enum(['default', 'true', 'false'])\n\t\t.default('true')\n\t\t.transform((val) => {\n\t\t\tswitch (val) {\n\t\t\t\tcase 'default':\n\t\t\t\t\treturn val\n\t\t\t\tcase 'true':\n\t\t\t\t\treturn true\n\t\t\t\tcase 'false':\n\t\t\t\t\treturn false\n\t\t\t}\n\t\t}),\n\tmodelSuffix: z.string().default('Model'),\n\tmodelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n})\n\ngeneratorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tprettyName: 'Zod Schemas',\n\t\t\tdefaultOutput: 'zod',\n\t\t\tversion: '0.2.1',\n\t\t}\n\t},\n\tonGenerate(options) {\n\t\tconst project = new Project({\n\t\t\tskipAddingFilesFromTsConfig: true,\n\t\t})\n\n\t\tconst outputPath = options.generator.output!.value\n\t\tconst models = options.dmmf.datamodel.models\n\n\t\tconst prismaClient = options.otherGenerators.find(\n\t\t\t(each) => each.provider.value === 'prisma-client-js'\n\t\t)\n\n\t\tconst parsedConfig = configSchema.safeParse(options.generator.config)\n\t\tif (!parsedConfig.success)\n\t\t\tthrow new Error(\n\t\t\t\t'Incorrect config provided. Please check the values you provided and try again.'\n\t\t\t)\n\n\t\tconst { relationModel, modelSuffix, modelCase } = parsedConfig.data\n\n\t\tconst formatModelName = (name: string, prefix = '') => {\n\t\t\tif (modelCase === 'camelCase') {\n\t\t\t\tname = name.slice(0, 1).toLowerCase() + name.slice(1)\n\t\t\t}\n\t\t\treturn `${prefix}${name}${modelSuffix}`\n\t\t}\n\n\t\tconst indexSource = project.createSourceFile(\n\t\t\t`${outputPath}/index.ts`,\n\t\t\t{},\n\t\t\t{\n\t\t\t\toverwrite: true,\n\t\t\t}\n\t\t)\n\n\t\tmodels.forEach((model) => {\n\t\t\tindexSource.addExportDeclaration({\n\t\t\t\tmoduleSpecifier: `./${model.name.toLowerCase()}`,\n\t\t\t})\n\n\t\t\tconst modelName = (name: string) =>\n\t\t\t\tformatModelName(name, relationModel === 'default' ? '_' : '')\n\n\t\t\tconst relatedModelName = (\n\t\t\t\tname:\n\t\t\t\t\t| string\n\t\t\t\t\t| DMMF.SchemaEnum\n\t\t\t\t\t| DMMF.OutputType\n\t\t\t\t\t| DMMF.SchemaArg\n\t\t\t) =>\n\t\t\t\tformatModelName(\n\t\t\t\t\trelationModel === 'default'\n\t\t\t\t\t\t? name.toString()\n\t\t\t\t\t\t: `Related${name.toString()}`\n\t\t\t\t)\n\n\t\t\tconst sourceFile = project.createSourceFile(\n\t\t\t\t`${outputPath}/${model.name.toLowerCase()}.ts`,\n\t\t\t\t{\n\t\t\t\t\tstatements: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\t\t\t\tnamespaceImport: 'z',\n\t\t\t\t\t\t\tmoduleSpecifier: 'zod',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\toverwrite: true,\n\t\t\t\t}\n\t\t\t)\n\n\t\t\tconst enumFields = model.fields.filter((f) => f.kind === 'enum')\n\n\t\t\tlet relativePath = path.relative(\n\t\t\t\toutputPath,\n\t\t\t\tprismaClient!.output!.value\n\t\t\t)\n\n\t\t\tif (relativePath.endsWith('/node_modules/@prisma/client')) {\n\t\t\t\trelativePath = '@prisma/client'\n\t\t\t} else if (\n\t\t\t\t!relativePath.startsWith('./') &&\n\t\t\t\t!relativePath.startsWith('../')\n\t\t\t) {\n\t\t\t\trelativePath = `./${relativePath}`\n\t\t\t}\n\n\t\t\tconst relationFields = model.fields.filter(\n\t\t\t\t(f) => f.kind === 'object'\n\t\t\t)\n\n\t\t\tif (\n\t\t\t\t(relationModel !== false && relationFields.length > 0) ||\n\t\t\t\tenumFields.length > 0\n\t\t\t) {\n\t\t\t\tsourceFile.addImportDeclaration({\n\t\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\t\tisTypeOnly: enumFields.length === 0,\n\t\t\t\t\tmoduleSpecifier: relativePath,\n\t\t\t\t\tnamedImports:\n\t\t\t\t\t\trelationModel !== false && relationFields.length > 0\n\t\t\t\t\t\t\t? [model.name, ...enumFields.map((f) => f.type)]\n\t\t\t\t\t\t\t: enumFields.map((f) => f.type),\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tsourceFile.addStatements((writer) =>\n\t\t\t\twriteArray(writer, getJSDocs(model.documentation))\n\t\t\t)\n\n\t\t\tsourceFile.addVariableStatement({\n\t\t\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\t\t\tisExported: true,\n\t\t\t\tdeclarations: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: modelName(model.name),\n\t\t\t\t\t\tinitializer(writer) {\n\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t.write('z.object(')\n\t\t\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\t\t\tmodel.fields\n\t\t\t\t\t\t\t\t\t\t.filter((f) => f.kind !== 'object')\n\t\t\t\t\t\t\t\t\t\t.forEach((field) => {\n\t\t\t\t\t\t\t\t\t\t\twriteArray(\n\t\t\t\t\t\t\t\t\t\t\t\twriter,\n\t\t\t\t\t\t\t\t\t\t\t\tgetJSDocs(field.documentation)\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfield.name\n\t\t\t\t\t\t\t\t\t\t\t\t\t}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfield\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.write(')')\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t})\n\n\t\t\tif (relationModel !== false && relationFields.length > 0) {\n\t\t\t\tconst filteredFields = relationFields.filter(\n\t\t\t\t\t(f) => f.type !== model.name\n\t\t\t\t)\n\n\t\t\t\tif (filteredFields.length > 0) {\n\t\t\t\t\tsourceFile.addImportDeclaration({\n\t\t\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\t\t\tmoduleSpecifier: './index',\n\t\t\t\t\t\tnamedImports: Array.from(\n\t\t\t\t\t\t\tnew Set(\n\t\t\t\t\t\t\t\tfilteredFields.flatMap((f) => [\n\t\t\t\t\t\t\t\t\t`Complete${f.type}`,\n\t\t\t\t\t\t\t\t\trelatedModelName(f.type),\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tsourceFile.addInterface({\n\t\t\t\t\tname: `Complete${model.name}`,\n\t\t\t\t\tisExported: true,\n\t\t\t\t\textends: (writer) => writer.write(model.name),\n\t\t\t\t\tproperties: relationFields.map((f) => ({\n\t\t\t\t\t\tname: f.name,\n\t\t\t\t\t\ttype: `Complete${f.type}${f.isList ? '[]' : ''}${\n\t\t\t\t\t\t\t!f.isRequired ? ' | null' : ''\n\t\t\t\t\t\t}`,\n\t\t\t\t\t})),\n\t\t\t\t})\n\n\t\t\t\tsourceFile.addStatements((writer) =>\n\t\t\t\t\twriteArray(writer, [\n\t\t\t\t\t\t'',\n\t\t\t\t\t\t'/**',\n\t\t\t\t\t\t` * ${relatedModelName(\n\t\t\t\t\t\t\tmodel.name\n\t\t\t\t\t\t)} contains all relations on your model in addition to the scalars`,\n\t\t\t\t\t\t' *',\n\t\t\t\t\t\t' * NOTE: Lazy required in case of potential circular dependencies within schema',\n\t\t\t\t\t\t' */',\n\t\t\t\t\t])\n\t\t\t\t)\n\n\t\t\t\tsourceFile.addVariableStatement({\n\t\t\t\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\t\t\t\tisExported: true,\n\t\t\t\t\tdeclarations: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: relatedModelName(model.name),\n\t\t\t\t\t\t\ttype: `z.ZodSchema<Complete${model.name}>`,\n\t\t\t\t\t\t\tinitializer(writer) {\n\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t`z.lazy(() => ${modelName(\n\t\t\t\t\t\t\t\t\t\t\tmodel.name\n\t\t\t\t\t\t\t\t\t\t)}.extend(`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\t\t\t\trelationFields.forEach((field) => {\n\t\t\t\t\t\t\t\t\t\t\twriteArray(\n\t\t\t\t\t\t\t\t\t\t\t\twriter,\n\t\t\t\t\t\t\t\t\t\t\t\tgetJSDocs(field.documentation)\n\t\t\t\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfield.name\n\t\t\t\t\t\t\t\t\t\t\t\t\t}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trelatedModelName\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t.write('))')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tsourceFile.formatText({\n\t\t\t\tindentSize: 2,\n\t\t\t\tconvertTabsToSpaces: true,\n\t\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t\t})\n\t\t})\n\n\t\treturn project.save()\n\t},\n})\n"],"names":["getJSDocs","docString","lines","docLines","split","filter","dL","trimLeft","startsWith","length","push","forEach","computeModifiers","line","map","trim","slice","getZodConstructor","field","getRelatedModelName","name","toString","zodType","extraModifiers","kind","type","isList","documentation","isRequired","join","writeArray","writer","array","newLine","write","conditionalNewLine","configSchema","z","object","relationModel","transform","val","modelSuffix","string","modelCase","generatorHandler","onManifest","prettyName","defaultOutput","version","onGenerate","options","project","Project","skipAddingFilesFromTsConfig","outputPath","generator","output","value","models","dmmf","datamodel","prismaClient","otherGenerators","find","each","provider","parsedConfig","safeParse","config","success","Error","data","formatModelName","prefix","toLowerCase","indexSource","createSourceFile","overwrite","model","addExportDeclaration","moduleSpecifier","modelName","relatedModelName","sourceFile","statements","StructureKind","ImportDeclaration","namespaceImport","enumFields","fields","f","relativePath","path","relative","endsWith","relationFields","addImportDeclaration","isTypeOnly","namedImports","addStatements","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","declarations","initializer","inlineBlock","filteredFields","Array","from","Set","flatMap","addInterface","properties","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","save"],"mappings":"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"}